{
    "Parameters": {
        "Package": {
            "Type": "string",
            "Description": "The path to the Web Deploy package to deploy.",
            "DefaultValue": ""
        },
        "LicenseFile": {
            "Type": "string",
            "Description": "The path to the Sitecore license file.",
            "DefaultValue": ".\\License.xml"
        },
        "SiteName": {
            "Type": "string",
            "DefaultValue": "XConnectCollection",
            "Description": "The name of the site to be deployed."
        },
        "SSLCert": {
            "Type": "string",
            "Description": "The certificate to use for HTTPS web bindings. Provide the name or the thumbprint. If not provided a certificate will be generated.",
            "DefaultValue": ""
        },
        "XConnectCert": {
            "Type": "string",
            "Description": "The certificate to use for encryption. Provide the name or the thumbprint.",
            "DefaultValue": ""
        },
        "SqlDbPrefix": {
            "Type": "string",
            "Description": "The prefix used for all Sql databases.",
            "DefaultValue": ""
        },
        "SqlAdminUser": {
            "Type": "string",
            "DefaultValue": "sa",
            "Description": "The Sql admin user account to use when installing databases."
        },
        "SqlAdminPassword": {
            "Type": "string",
            "DefaultValue": "12345",
            "Description": "The Sql admin password to use when installing databases."
        },
        "SqlCollectionUser": {
            "Type": "string",
            "DefaultValue": "collectionuser",
            "Description": "The Sql admin user account to use when installing databases."
        },
        "SqlCollectionPassword": {
            "Type": "string",
            "DefaultValue": "SIF-Default",
            "Description": "The Sql admin password to use when installing databases."
        },
        "SqlProcessingPoolsUser": {
            "Type": "string",
            "DefaultValue": "poolsuser",
            "Description": "The Sql user for the Processing Pools connection string in Sitecore."
        },
        "SqlProcessingPoolsPassword": {
            "Type": "string",
            "DefaultValue": "SIF-Default",
            "Description": "The Sql password for the Processing Pools connection string in Sitecore."
        },
        "SqlMarketingAutomationUser": {
            "Type": "string",
            "DefaultValue": "marketingautomationuser",
            "Description": "The Sql user for the Marketing Automation connection string in Sitecore."
        },
        "SqlMarketingAutomationPassword": {
            "Type": "string",
            "DefaultValue": "SIF-Default",
            "Description": "The Sql password for the Marketing Automation connection string in Sitecore."
        },
        "SqlMessagingUser": {
            "Type": "string",
            "DefaultValue": "messaginguser",
            "Description": "The Sql user for the Messaging connection string in Sitecore."
        },
        "SqlMessagingPassword": {
            "Type": "string",
            "DefaultValue": "SIF-Default",
            "Description": "The Sql password for the Messaging connection string in Sitecore."
        },
        "SqlServer": {
            "Type": "string",
            "DefaultValue": ".\\SQLSERVER",
            "Description": "The Sql Server where databases will be installed."
        },
        "XConnectEnvironment": {
            "Type": "string",
            "DefaultValue": "Development",
            "Description": "The configuration environment for this instance."
        },
        "XConnectLogLevel": {
            "Type": "string",
            "DefaultValue": "Information",
            "Description": "The level of log information to output."
        },
        "HostMappingName": {
            "Type": "string",
            "Reference": "SiteName",
            "Description": "The host mapping name of the site."
        },
        "DnsName" :{
            "Type": "string",
            "Reference": "SiteName",
            "Description": "The dns name of the site."
        }
    },
    "Variables": {
        "Sharding.Database.Prefix": "[concat(parameter('SqlDbPrefix'), '_Xdb.Collection.Shard')]",

        "Sql.Database.ShardMapManager":     "[concat(variable('Sharding.Database.Prefix'), 'MapManager')]",
        "Sql.Database.Shard0":              "[concat(variable('Sharding.Database.Prefix'), '0')]",
        "Sql.Database.Shard1":              "[concat(variable('Sharding.Database.Prefix'), '1')]",
        "Sql.Database.Pools":               "[concat(parameter('SqlDbPrefix'), '_Processing.Pools')]",
        "Sql.Database.MarketingAutomation": "[concat(parameter('SqlDbPrefix'), '_MarketingAutomation')]",
        "Sql.Database.Messaging": "[concat(parameter('SqlDbPrefix'), '_Messaging')]",

        "SqlMarketingAutomation.Password": "[parameter('SqlMarketingAutomationPassword'))]",
        "SqlMessaging.Password": "[parameter('SqlMessagingPassword'))]",
        "SqlProcessingPools.Password": "[parameter('SqlProcessingPoolsPassword'))]",
        "SqlCollection.Password": "[parameter('SqlCollectionPassword'))]",

        "SqlCollection.User":  "[parameter('SqlCollectionUser'))]",

        "Security.CertificateStore": "Cert:\\Localmachine\\My",
        "Security.SSL.CertificateThumbprint": "[GetCertificateThumbprint(parameter('SSLCert'), variable('Security.CertificateStore'))]",
        "Security.XConnect.CertificateThumbprint": "[GetCertificateThumbprint(parameter('XConnectCert'), variable('Security.CertificateStore'))]",
        "Security.XConnect.CertificatePath":        "[joinpath(variable('Security.CertificateStore'), variable('Security.XConnect.CertificateThumbprint'))]",

        "Site.PhysicalPath": "[joinpath(environment('SystemDrive'), 'inetpub', 'wwwroot', parameter('SiteName'))]",
        "Site.DataFolder": "[joinpath(variable('Site.PhysicalPath'), 'App_Data')]",

        "Services.IndexWorker.InstallPath": "[joinpath(variable('Site.DataFolder'), 'jobs','continuous','IndexWorker')]",
        "Services.IndexWorker.Name": "[concat(parameter('SiteName'), '-indexworker')]",

        "Sharding.Root.Path":       "[joinpath(variable('Site.DataFolder'), 'collectiondeployment')]",
        "Sharding.Tool.Path":       "[joinpath(variable('Sharding.Root.Path'), 'Sitecore.Xdb.Collection.Database.SqlShardingDeploymentTool.exe')]",
        "Sharding.DacPac.Path":     "[joinpath(variable('Sharding.Root.Path'), 'Sitecore.Xdb.Collection.Database.Sql.dacpac')]",
        "Sharding.Map.Names":       ["ContactIdShardMap", "DeviceProfileIdShardMap", "ContactIdentifiersIndexShardMap" ],
        "Sharding.DB.Connection":   "[sqlconnectionstring(parameter('SqlServer'), '', parameter('SqlAdminUser'), parameter('SqlAdminPassword'))]",
        "Sharding.Edition":         "Basic",
        "Sharding.SqlCmd.Path.CreateShardApplicationDatabaseServerLogin":   "[joinpath(variable('Sharding.Root.Path'), 'CreateShardApplicationDatabaseServerLogin.sql')]",
        "Sharding.SqlCmd.Path.CreateShardManagerApplicationDatabaseUser":   "[joinpath(variable('Sharding.Root.Path'), 'CreateShardManagerApplicationDatabaseUser.sql')]",
        "Sharding.SqlCmd.Path.CreateShardApplicationDatabaseUser":          "[joinpath(variable('Sharding.Root.Path'), 'CreateShardApplicationDatabaseUser.sql')]",

        "Sql.Secure.Password" : "[ConvertToSecureString(String:parameter('SqlAdminPassword'),AsPlainText:true,Force:true)]",
        "Sql.Credential": "[NewPSCredential(Username:parameter('SqlAdminUser'),Password:variable('SQL.Secure.Password'))]"
    },
    "Register":{
        "Tasks": {
            "RemoveItem": "Remove-Item",
            "RemoveSQLLogin": "Remove-SQLLogin"
        },
        "ConfigFunction": {
            "ConvertToSecureString": "ConvertTo-SecureString"
        }
    },
    "Tasks": {
        "CreatePaths": {
            "Description": "Ensure the destination path for the site exists.",
            "Type": "EnsurePath",
            "Params": {
                "Exists": [ "[variable('Site.PhysicalPath')]" ]
            }
        },
        "CreateAppPool": {
            "Description": "Creates or updates the app pool.",
            "Type": "AppPool",
            "Params": {
                "Name": "[parameter('SiteName')]",
                "Properties": {
                    "ProcessModel": {
                        "identityType" : "ApplicationPoolIdentity"
                    }
                }
            }
        },
        "SetAppPoolCertStorePermissions": {
            "Description": "Set permissions for the App Pool User to access the client certificate.",
            "Type": "FilePermissions",
            "Params": {
                "Path" : "[ResolveCertificatePath(variable('Security.XConnect.CertificatePath'))]",
                "Rights": [
                    {
                        "User": "[concat('IIS AppPool\\', parameter('SiteName'))]",
                        "FileSystemRights": ["Read"],
                        "InheritanceFlags": [ "None"]
                    }
                ]
            }
        },
        "CreateWebsite": {
            "Description": "Creates or updates the IIS website instance.",
            "Type": "Website",
            "Params": {
                "Name": "[parameter('SiteName')]",
                "ApplicationPool": "[parameter('SiteName')]",
                "PhysicalPath": "[variable('Site.PhysicalPath')]"
            }
        },
        "StopWebsite": {
            "Description": "Stops the website if it is running.",
            "Type": "ManageWebsite",
            "Params": {
                "Name": "[parameter('SiteName')]",
                "Action": "Stop"
            }
        },
        "StopAppPool": {
            "Description": "Stops the app pool if it is running.",
            "Type": "ManageAppPool",
            "Params": {
                "Name": "[parameter('SiteName')]",
                "Action": "Stop"
            }
        },
        "RemoveDefaultBinding": {
            "Description": "Removes the default *:80 web binding.",
            "Type": "WebBinding",
            "Params": {
                "SiteName" : "[parameter('SiteName')]",
                "Remove" : [ { "Port": "80", "IPAddress": "*" } ]
            }
        },
        "CreateBindingsWithThumbprint": {
            "Description": "Configures the site bindings for the website.",
            "Type": "WebBinding",
            "Params": {
                "SiteName" : "[parameter('SiteName')]",
                "Add": [
                    {
                        "HostHeader": "[parameter('DnsName')]",
                        "Protocol": "https",
                        "SSLFlags": 1,
                        "Thumbprint": "[variable('Security.SSL.CertificateThumbprint')]"
                    }
                ]
            },
            "Skip": "[not(parameter('SSLCert'))]"
        },
        "SetClientCertificatePermissions": {
            "Type": "WebsiteClientCert",
            "Params": {
                "SiteName": "[parameter('SiteName')]",
                "Setting": "Accept"
            }
        },
        "SupportListManagerLargeUpload":{
            "Type": "IISConfiguration",
            "Params": {
                "SiteName": "[parameter('SiteName')]",
                "ConfigPath": "system.webServer/serverRuntime",
                "Key": "uploadReadAheadSize",
                "Value": 491520000
            }
        },
        "CreateHostHeader": {
            "Description": "Sets a hostheader for the website.",
            "Type": "HostHeader",
            "Params": {
                "HostName": "[parameter('HostMappingName')]"
            },
            "Skip": "[not(parameter('HostMappingName'))]"
        },
        "SetPermissions": {
            "Description": "Sets permissions for the app pool user.",
            "Type": "FilePermissions",
            "Params": {
                "Path" : "[variable('Site.PhysicalPath')]",
                "Rights": [
                    {
                        "User": "[concat('IIS AppPool\\', parameter('SiteName'))]",
                        "FileSystemRights": "FullControl",
                        "InheritanceFlags": [ "ContainerInherit", "ObjectInherit"]
                    }
                ]
            }
        },
        "InstallWDP": {
            "Description": "Syncs the web deploy package with the website.",
            "Type": "WebDeploy",
            "Params" : {
                "Verb": "Sync",
                "Arguments": {
                    "Source": { "Package": "[resolvepath(parameter('Package'))]" },
                    "Dest": "Auto",
                    "SetParam":  [
                        { "Name": "IIS Web Application Name", "Value":  "[parameter('SiteName')]" },
                        { "Name": "Database Server Name", "Value": "[parameter('SqlServer')]" },
                        { "Name": "Database Admin User Name", "Value": "[parameter('SqlAdminUser')]" },
                        { "Name": "Database Admin User Password", "Value": "[parameter('SqlAdminPassword')]" },
                        { "Name": "Collection Database Server Name", "Value": "[parameter('SqlServer')]" },
                        { "Name": "Collection Shard Map Manager Database Name", "Value":  "[variable('Sql.Database.ShardMapManager')]" },
                        { "Name": "Collection Shard 0 Database Name", "Value":  "[variable('Sql.Database.Shard0')]" },
                        { "Name": "Collection Shard 1 Database Name", "Value":  "[variable('Sql.Database.Shard1')]" },
                        { "Name": "Processing Pools Database Name", "Value":  "[variable('Sql.Database.Pools')]" },
                        { "Name": "Marketing Automation Database Name", "Value":  "[variable('Sql.Database.MarketingAutomation')]" },
                        { "Name": "Messaging Database Name", "Value":  "[variable('Sql.Database.Messaging')]" },
                        { "Name": "Collection Database Application User Name", "Value":  "[variable('SqlCollection.User')]" },
                        { "Name": "Collection Database Application User Password", "Value":  "[variable('SqlCollection.Password')]" },
                        { "Name": "Processing Pool Database Application User Name", "Value":  "[parameter('SqlProcessingPoolsUser')]" },
                        { "Name": "Processing Pool Database Application User Password", "Value":  "[variable('SqlProcessingPools.Password')]" },
                        { "Name": "Marketing Automation Database Application User Name", "Value":  "[parameter('SqlMarketingAutomationUser')]" },
                        { "Name": "Marketing Automation Database Application User Password", "Value":  "[variable('SqlMarketingAutomation.Password')]" },
                        { "Name": "Messaging Database Application User Name", "Value":  "[parameter('SqlMessagingUser')]" },
                        { "Name": "Messaging Database Application User Password", "Value":  "[variable('SqlMessaging.Password')]" },
                        { "Name": "XConnect Server Configuration Environment", "Value":  "[parameter('XConnectEnvironment')]" },
                        { "Name": "XConnect Server Certificate Validation Thumbprint", "Value":  "[variable('Security.XConnect.CertificateThumbprint')]" },
                        { "Name": "XConnect Server Log Level", "Value":  "[parameter('XConnectLogLevel')]" }
                    ]
                }
            }
        },
        "SetLicense" : {
            "Description": "Copies the license file to the instance data folder.",
            "Type": "Copy",
            "Params": {
                "Source": "[resolvepath(parameter('LicenseFile'))]",
                "Destination": "[variable('Site.DataFolder')]"
            }
        },
        "CreateBindingsWithDevelopmentThumbprint": {
            "Description": "Creates a new thumbprint with a custom CA.",
            "Type": "AddWebFeatureSSL",
            "Params": {
                "SiteName": "[parameter('SiteName')]",
                "HostName": "[parameter('DnsName')]",
                "OutputDirectory": "[variable('Site.DataFolder')]"
            },
            "Skip": "[parameter('SSLCert')]"
        },
        "CleanShards" : {
            "Description": "Drop existing shards.",
            "Type": "Command",
            "Params": {
                "Path": "[variable('Sharding.Tool.Path')]",
                "Arguments":[
                    "/operation", "drop",
                    "/connectionstring", "[variable('Sharding.DB.Connection')]",
                    "/dbedition", "[variable('Sharding.Edition')]",
                    "/shardMapManagerDatabaseName", "[variable('Sql.Database.ShardMapManager')]",
                    "/shardMapNames", "[join(variable('Sharding.Map.Names'))]"
                ],
                "TaskName" : "ShardingTool - Clean"
            }
        },
        "CreateShards": {
            "Description": "Create new shards.",
            "Type": "Command",
            "Params": {
                "Path": "[variable('Sharding.Tool.Path')]",
                "Arguments":[
                    "/operation", "create",
                    "/connectionstring", "[variable('Sharding.DB.Connection')]",
                    "/dbedition", "[variable('Sharding.Edition')]",
                    "/shardMapManagerDatabaseName", "[variable('Sql.Database.ShardMapManager')]",
                    "/shardMapNames", "[join(variable('Sharding.Map.Names'))]",
                    "/shardnumber", 2,
                    "/shardnameprefix", "[variable('Sharding.Database.Prefix')]",
                    "/shardnamesuffix", "\"\"",
                    "/dacpac", "[variable('Sharding.DacPac.Path')]"
                ],
                "TaskName" : "ShardingTool - Create"
            }
        },
        "CreateShardApplicationDatabaseServerLoginSqlCmd": {
            "Description": "Create Collection Shard Database Server Login.",
            "Type": "Command",
            "Params": {
                "Path": "sqlcmd",
                "Arguments": [
                    "-i",
                    "[variable('Sharding.SqlCmd.Path.CreateShardApplicationDatabaseServerLogin')]",
                    "-S",
                    "[parameter('SqlServer')]",
                    "-U",
                    "[parameter('SqlAdminUser')]",
                    "-P",
                    "[parameter('SqlAdminPassword')]",
                    "-v",
                    "[concat('UserName=',variable('SqlCollection.User'))]",
                    "-v",
                    "[concat('Password=',variable('SqlCollection.Password'))]"
                ]
            }
        },
        "CreateShardManagerApplicationDatabaseUserSqlCmd": {
            "Description": "Create Collection Shard Manager Database User.",
            "Type": "Command",
            "Params": {
                "Path": "sqlcmd",
                "Arguments": [
                    "-i",
                    "[variable('Sharding.SqlCmd.Path.CreateShardManagerApplicationDatabaseUser')]",
                    "-S",
                    "[parameter('SqlServer')]",
                    "-U",
                    "[parameter('SqlAdminUser')]",
                    "-P",
                    "[parameter('SqlAdminPassword')]",
                    "-v",
                    "[concat('UserName=',variable('SqlCollection.User'))]",
                    "-v",
                    "[concat('ShardMapManagerDatabaseName=',variable('Sql.Database.ShardMapManager'))]"
                ]
            }
        },
        "CreateShard0ApplicationDatabaseUserSqlCmd": {
            "Description":"Create Collection Shard 0 Database User.",
            "Type": "Command",
            "Params": {
                "Path": "sqlcmd",
                "Arguments": [
                    "-i",
                    "[variable('Sharding.SqlCmd.Path.CreateShardApplicationDatabaseUser')]",
                    "-S",
                    "[parameter('SqlServer')]",
                    "-U",
                    "[parameter('SqlAdminUser')]",
                    "-P",
                    "[parameter('SqlAdminPassword')]",
                    "-v",
                    "[concat('UserName=',variable('SqlCollection.User'))]",
                    "-v",
                    "[concat('ShardDatabaseName=',variable('Sql.Database.Shard0'))]"
                ]
            }
        },
        "CreateShard1ApplicationDatabaseUserSqlCmd": {
            "Description":"Create Collection Shard 1 Database User.",
            "Type": "Command",
            "Params": {
                "Path": "sqlcmd",
                "Arguments": [
                    "-i",
                    "[variable('Sharding.SqlCmd.Path.CreateShardApplicationDatabaseUser')]",
                    "-S",
                    "[parameter('SqlServer')]",
                    "-U",
                    "[parameter('SqlAdminUser')]",
                    "-P",
                    "[parameter('SqlAdminPassword')]",
                    "-v",
                    "[concat('UserName=',variable('SqlCollection.User'))]",
                    "-v",
                    "[concat('ShardDatabaseName=',variable('Sql.Database.Shard1'))]"
                ]
            }
        },
        "StartAppPool": {
            "Description":"Starts the app pool.",
            "Type": "ManageAppPool",
            "Params": {
                "Name": "[parameter('SiteName')]",
                "Action": "Start"
            }
        },
        "StartWebsite": {
            "Description":"Starts the website.",
            "Type": "ManageWebsite",
            "Params": {
                "Name": "[parameter('SiteName')]",
                "Action": "Start"
            }
        }
    },
    "UninstallTasks": {
        "StopWebsite": {
            "Description": "Stops the website if it is running.",
            "Type": "ManageWebsite",
            "Params": {
                "Name": "[parameter('SiteName')]",
                "Action": "Stop",
                "ErrorAction": "SilentlyContinue"
            }
        },
        "StopAppPool": {
            "Description": "Stops the app pool if it is running.",
            "Type": "ManageAppPool",
            "Params": {
                "Name": "[parameter('SiteName')]",
                "Action": "Stop",
                "ErrorAction": "SilentlyContinue"
            }
        },
        "RemoveWebsite": {
            "Description": "Removes the IIS website.",
            "Type": "RemoveWebsite",
            "Params": {
                "Name": "[parameter('SiteName')]"
            }
        },
        "RemoveAppPool": {
            "Description": "Removes the IIS application pool.",
            "Type": "RemoveAppPool",
            "Params": {
                "Name": "[parameter('SiteName')]"
            }
        },
        "RemoveContent": {
            "Description": "Removes website content.",
            "Type": "RemoveItem",
            "Params": {
                "Path": "[variable('Site.PhysicalPath')]",
                "Recurse": true,
                "ErrorAction": "SilentlyContinue"
            }
        },
        "RemoveHostHeader": {
            "Description": "Removes the website host name.",
            "Type": "HostHeader",
            "Params": {
                "HostName": "[parameter('SiteName')]",
                "Action": "Remove"
            }
        },
        "RemoveDatabases": {
            "Description": "Removes the databases.",
            "Type": "RemoveSQLDatabase",
            "Params": {
                "ServerName": "[parameter('SqlServer')]",
                "Username": "[parameter('SqlAdminUser')]",
                "Password": "[variable('Sql.Secure.Password')]",
                "DatabaseName": [
                    "[variable('Sql.Database.ShardMapManager')]",
                    "[variable('Sql.Database.Shard0')]",
                    "[variable('Sql.Database.Shard1')]",
                    "[variable('Sql.Database.Pools')]",
                    "[variable('Sql.Database.MarketingAutomation')]",
                    "[variable('Sql.Database.Messaging')]"
                ]
            }
        },
        "RemoveLogin":{
            "Description": "Removes the sqlcollectionuser login from the database server.",
            "Type": "RemoveSQLLogin",
            "Params": {
                "LoginName": "[variable('SqlCollection.User')]",
                "ServerInstance": "[parameter('SqlServer')]",
                "Credential": "[variable('Sql.Credential')]",
                "Force": true,
                "ErrorAction": "SilentlyContinue"
            }
        }
    }
}